bravo_alt/
├── api/
│   ├── __init__.py
│   ├── v1/
│   │   ├── __init__.py
│   │   ├── endpoints/
│   │   │   ├── __init__.py
│   │   │   └── analysis.py       # Defines /analyze and /report routes
│   │   └── schemas.py            # Pydantic models for API request/response
│   └── main.py                   # FastAPI app instantiation and router setup
├── core/
│   ├── __init__.py
│   └── services/
│       ├── __init__.py
│       ├── analysis_orchestrator.py # The main service that runs the pipeline
│       ├── keyword_clusterer.py     # Handles embedding and clustering logic
│       └── knowledge_extractor.py   # Handles LLM-based insight extraction
├── data_access/
│   ├── __init__.py
│   ├── database.py             # DB Session management (SQLAlchemy)
│   ├── models.py               # SQLAlchemy ORM models (tables)
│   └── repository.py           # Data Access Layer, abstracts DB queries
├── integrations/
│   ├── __init__.py
│   ├── base_client.py          # (Optional) Base class for clients with retry logic
│   ├── google_ads_client.py    # Client for Google Ads API
│   ├── llm_client.py           # Client for the LLM API (e.g., OpenAI)
│   └── web_scraper.py          # Utility for scraping domain content
├── tasks/
│   ├── __init__.py
│   ├── celery_app.py           # Celery application setup
│   └── analysis_tasks.py       # Defines the main async analysis task
├── tests/
│   ├── __init__.py
│   ├── api/
│   ├── core/
│   ├── data_access/
│   └── test_fixtures.py
├── .env.example                # Template for environment variables
├── config.py                   # Pydantic settings management
├── Dockerfile
├── docker-compose.yml
└── requirements.txt